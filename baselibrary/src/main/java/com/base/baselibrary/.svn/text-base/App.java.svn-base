package com.base.baselibrary;

import com.base.baselibrary.base.MainApplication;
import com.base.baselibrary.util.GlideImageLoader;
import com.base.baselibrary.util.PreferencesUtils;
import com.google.gson.Gson;
import com.lzy.imagepicker.ImagePicker;
import com.lzy.imagepicker.view.CropImageView;

public class App extends MainApplication {

    private static App gDefault;

    public final Gson gson = new Gson();

    public static App getApp() {
        return gDefault;
    }


    @Override
    public void onCreate() {
        gDefault = this;
        super.onCreate();


        PreferencesUtils.initPrefs(this);

        gDefault = this;
        //初始化Retrofit
//                dianruApis = RetrofitFactory.createDianruRetrofit();
//                wxApis = RetrofitFactory.createWxApisRetrofit();
        initImageSelect();


        //        String processName = PackageUtils.getProcessName(this, Process.myPid());
//        if (processName != null) {
//            if (processName.equals(BuildConfig.APPLICATION_ID)) {

        //初始化bugly
//                initbugly();
//            }
//        }
    }

    private void registToWX() {
//        //AppConst.WEIXIN.APP_ID是指你应用在微信开放平台上的AppID，记得替换。
//        mWxApi = WXAPIFactory.createWXAPI(this,Constants.INSTANCE.getWEIXIN_APP_ID(), false);
//        // 将该app注册到微信
//        mWxApi.registerApp(Constants.INSTANCE.getWEIXIN_APP_ID());
    }


//    /**
//     * 设置greenDao
//     */
//    public static void setDatabase() {
//        // 通过 DaoMaster 的内部类 DevOpenHelper，你可以得到一个便利的 SQLiteOpenHelper 对象。
//        // 可能你已经注意到了，你并不需要去编写「CREATE TABLE」这样的 SQL 语句，因为 greenDAO 已经帮你做了。
//        // 注意：默认的 DaoMaster.DevOpenHelper 会在数据库升级时，删除所有的表，意味着这将导致数据的丢失。
//        // 所以，在正式的项目中，你还应该做一层封装，来实现数据库的安全升级。
//
//        MySQLiteOpenHelper mHelper = new MySQLiteOpenHelper(new GreenDaoContext(), "com.base
// .baselibrary.db", null);//GreenDaoContext为创建数据库路径使用
//        mDaoMaster = new DaoMaster(mHelper.getWritableDatabase());
//        // 注意：该数据库连接属于 DaoMaster，所以多个 Session 指的是相同的数据库连接。
//        mDaoSession = mDaoMaster.newSession();
//
//    }

    private void initbugly() {
//        BuglyStrategy bugly = new BuglyStrategy();
//        bugly.setAppChannel(getResources().getString(R.string.channel));
//                Bugly.init(this, "bd85bc4498", true);
//        Bugly.init(this, "bd85bc4498", BuildConfig.DEBUG, bugly);
    }

    private void initImageSelect() {
        ImagePicker imagePicker = ImagePicker.getInstance();
        imagePicker.setImageLoader(new GlideImageLoader());   //设置图片加载器
        imagePicker.setShowCamera(true);  //显示拍照按钮
        imagePicker.setCrop(false);        //允许裁剪（单选才有效）
        imagePicker.setSaveRectangle(true); //是否按矩形区域保存
        imagePicker.setSelectLimit(9);    //选中数量限制
        imagePicker.setMultiMode(true);
        imagePicker.setStyle(CropImageView.Style.CIRCLE);  //裁剪框的形状
        imagePicker.setFocusWidth(800);   //裁剪框的宽度。单位像素（圆形自动取宽高最小值）
        imagePicker.setFocusHeight(800);  //裁剪框的高度。单位像素（圆形自动取宽高最小值）
        imagePicker.setOutPutX(800);//保存文件的宽度。单位像素
        imagePicker.setOutPutY(800);//保存文件的高度。单位像素
    }


//    @Override
//    protected void attachBaseContext(Context base) {
//        super.attachBaseContext(base);
//        MultiDex.install(this) ;
//    }


}
